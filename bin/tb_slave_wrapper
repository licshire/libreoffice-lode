#!/bin/bash
# -*- tab-width : 4; indent-tabs-mode : nil -*-
#
#    Copyright (C) 2014-2015 Norbert Thiebaud
#    License: GPLv3
#

trap cleanup 1 2 3 6 15

cleanup()
{
  echo "Caught Signal ... killing everything...."
  # kill everything in same process group (pseudo-pid 0)
  kill -9 0
}

die()
{
    echo  "$@"
    exit 1;
}

adjust_config()
{
    pos="$1"
    neg="$2"

    if [ ! -f autogen.input.job ] ; then
        touch autogen.input.job
    fi
    grep -v "${neg}" autogen.input.job 2> /dev/null > autogen.input.temp
    echo "${pos}" > autogen.input.temp
    mv autogen.input.temp autogen.input.job
}

process_distro_config()
{
    cfg="$1"
    if [ -f "./distro-configs/Jenkins/$cfg" ] ; then
        cat "./distro-configs/Jenkins/$cfg" >> autogen.input.job.config
        printf 'Taking configuration values from %s\n' "./distro-configs/Jenkins/$cfg"
    elif [ -f "./distro-configs/Jenkins/${cfg}.conf" ] ; then
        cat "./distro-configs/Jenkins/${cfg}.conf" >> autogen.input.job.config
        printf 'Taking configuration values from %s\n' "./distro-configs/Jenkins/${cfg}.conf"
    fi
    if [ -f "./distro-configs/Jenkins/${DistroPrefix?}_${cfg}.conf" ] ; then
        cat "./distro-configs/Jenkins/${DistroPrefix?}_${cfg}.conf" >> autogen.input.job.config
        printf 'Taking configuration values from %s\n' \
            "./distro-configs/Jenkins/${DistroPrefix?}_${cfg}.conf"
    fi

}

process_config()
{
    opt="$1"

    case "$opt" in
        --enable-debug)
            adjust_config "--enable-debug" "--disable-debug"
            ;;
        --disable-debug)
            adjust_config "--disable-debug" "--enable-debug"
            ;;
        --disable-dbgutil)
            adjust_config "--disable-dbgutil" "--enable-dbgutil"
            ;;
        --enable-dbgutil)
            adjust_config "--enable-dbgutil" "--disable-dbgutil"
            ;;
        --enable-64-bit)
            adjust_config "--enable-64-bit" "--disable-64-bit"
            if [ "${OS}" == "Cygwin" ] ; then
                DistroPrefix="Win64"
            fi
            ;;
        --disable-64-bit)
            adjust_config "--disable-64-bit" "--enable-64-bit"
            if [ "${OS}" == "Cygwin" ] ; then
                DistroPrefix="Win32"
            fi
            ;;
        --enable-symbols)
            adjust_config "--enable-symbols" "--disable-symbols"
            ;;
    esac
}

final_config()
{
    if [ -f autogen.input.job ] ; then
        cat autogen.input.job >> autogen.input.job.config
        diff -u autogen.input autogen.input.job.config > /dev/null 2> /dev/null
        if [ "$?" != "0" ] ; then
            mv autogen.input.job.config autogen.input
        fi
    else
        touch autogen.input.job.config

        diff -u autogen.input autogen.input.job.config > /dev/null 2> /dev/null
        if [ "$?" != "0" ] ; then
            mv autogen.input.job.config autogen.input
        fi
    fi
}


setup_tempdir()
{
    rm -fr tempdir
    mkdir tempdir
    saved_TMPDIR="$TMPDIR"
    export TMPDIR="$(pwd)/tempdir"
    export TMP="$TMPDIR"
    echo "set TMPDIR=$TMPDIR"
}

restore_tempdir()
{
    export TMPDIR="${saved_TMPDIR?}"
    export TMP="$TMPDIR"
}


os=$(uname)
start_time=
clean=
mode=tb
name=
target=
fetch=
extra=
ubsan=
distro_config=

rm -f autogen.input.job
rm -f autogen.input.job.config
rm -f core.*

echo "OS:${OS}"
echo "pwd:$(pwd)"

ulimit -c unlimited

case "$(uname)" in
    Darwin)
        OS="MacOSX"
        DistroPrefix="MacOSX"
        ;;
    Linux)
        OS="Linux"
        DistroPrefix="Linux"
        ;;
    CYGWIN*)
        OS="Cygwin"
        DistroPrefix="Win32"
        ;;
    *)
        echo "Unsupported OS:$(uname)"
        exit 2
        ;;
esac

while [ "${1}" != "" ]; do
    parm=${1%%=*}
    arg=${1#*=}
    has_arg=
    if [ "${1}" != "${parm?}" ] ; then
        has_arg=1
    else
        arg=""
    fi

    case "${parm}" in
        --branch|-b)
            tb_branch="$arg"
            ;;
        --os)
            os="$arg"
            ;;
        --real)
            start_time=`date -u '+%s'`
            ;;
        --clean)
            clean=1
            ;;
        --elf)
            if [ "$OS" = "Linux" ] ; then
                extra="elf-check $extra"
            fi
            ;;
        --name)
            name="$arg"
            ;;
        --target)
            target="$arg"
            ;;
        --uicheck)
            target="uicheck"
            ;;
        --check)
            target="check"
            ;;
        --updater)
            extra="do_updater $extra"
            ;;
        --screenshots)
            extra="do_screenshots $extra"
            target="screenshot"
            ;;
        --docs)
            if [[ "${NODE_LABELS}" == *"Docs"* ]] ; then
                extra="do_docs $extra"
            fi
            ;;
        --perfsuite)
            extra="do_perfsuite $extra"
            ;;
        --fetch)
            fetch="$arg"
            ;;
        --mode)
            mode="$arg"
            ;;
        --env)
            env_file="$arg"
            ;;
        --config)
            process_config "$arg"
            ;;
        --distro-config)
            distro_config="$arg"
            ;;
        -*)
            die "Invalid option $1"
            ;;
        *)
            die "Invalid argument $1"
            ;;
    esac
    shift
done


if [ "${mode}" = "tb" ] ; then
    build_log="build.log.tmp"
else
    build_log="build.log"
fi

rm -f build.log.tmp
rm -f build.log

R=0

if [ "$R" = "0" -a "$fetch" != "" ] ; then
    git pull -r || R=1
    git submodule update
fi

sha="$(git rev-parse HEAD)"

if [ "${mode?}" = "gerrit" ] ; then
    if [ "${OS?}" = "Linux" ] ; then
        process_config "--enable-dbgutil"
        target="check"
    fi
elif [ "${mode?}" = "config" ] ; then
    if [ -f "./distro-configs/Jenkins/$Config" ] ; then
        echo "config mode : $Config"
        process_distro_config "$Config"
        if [ -f "$LODE_HOME/bin/${Config}.env" ] ; then
            source "$LODE_HOME/bin/${Config}.env"
        fi
    else
        # temporary work around until master caugh up and all pending gerrit patch too
        if [ "${OS?}" = "Linux" -o "${OS?}" = "MacOSX" ] ; then
            process_config "--enable-dbgutil"
        fi
    fi
fi

if [ -n "$distro_config" ] ; then
    process_distro_config "$distro_config"
fi

final_config

setup_tempdir

if [ -n "$env_file" ] ; then
    echo "sourcing  $LODE_HOME/bin/${env_file}"
    source "$LODE_HOME/bin/${env_file}"
fi

if [ ! -f Makefile -o Makefile -ot configure.ac -o "$mode" = "configcheck" ] ; then
    echo "./autogen.sh 2>&1" | tee -a ${build_log}
    ./autogen.sh 2>&1 | tee -a ${build_log}
    R=${PIPESTATUS[0]}

    if [ "$R" = "0" ] ; then
        touch config_host.mk
    elif [ "$mode" = "configcheck" ] ; then
        restore_tempdir
        exit 0
    fi
fi
if [ "$R" = "0" -a -f .clean_slave ] ; then
    echo "make clean" 2>&1 | tee -a ${build_log}
    make clean 2>&1 | tee -a ${build_log}
    rm .clean_slave
elif [ "$R" = "0" -a "$clean" = "1" ] ; then
    make clean 2>&1 | tee -a ${build_log}
fi

if [ "$R" = "0" ] ; then
    cat config_host.mk | tee -a "${build_log?}"
    if [ "${OS}" = "Cygwin" ] ; then
        echo "jenkins_build_client make $target"
        ${LODE_HOME}/bin/jenkins_build_client make $target 2>&1 | tee -a ${build_log}
        R=${PIPESTATUS[0]}
    else
        echo "make $target" 2>&1 | tee -a ${build_log}
        make $target 2>&1 | tee -a ${build_log}
        R=${PIPESTATUS[0]}
    fi
fi

for e in $extra ; do
    if [ "$R" = "0" ] ; then
        $LODE_HOME/bin/${e} 2>&1 | tee -a ${build_log}
        R=${PIPESTATUS[0]}
    fi
done

restore_tempdir

if [ "$R" = "0" ] ; then
    S="success"
else
    S="build_failed"
fi

if [ -z "${start_time}" ] ;  then
    start_time=`date -u '+%s'`
fi

if [ "${mode}" == "tb" ] ; then
    if [ -z "${name}" ] ; then
        name="Jenkins_${os}"
    fi
    cat <<EOF > build.log

tinderbox: administrator: jenkins
tinderbox: buildname: ${name}
tinderbox: tree: ${tb_branch}
tinderbox: starttime: ${start_time?}
tinderbox: timenow: `date -u '+%s'`
tinderbox: errorparser: unix
tinderbox: status: $S
tinderbox: END

TinderboxPrint: <a title="jenkins build" href="http://ci.libreoffice.org/job/${JOB_NAME}/${BUILD_NUMBER}/">jenkins on $NODE_NAME</a>
TinderboxPrint: <a title="core" href="http://cgit.freedesktop.org/libreoffice/core/log/?id=${sha}">core</a>
EOF

    cat ${build_log} >> build.log
    rm ${build_log}
fi

exit $R
